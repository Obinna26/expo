pluginManagement {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()
  def (_, reactNativeMinor) = version.split("-")[0].tokenize('.').collect { it.toInteger() }

  if(reactNativeMinor >= 75) {
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
  }
  repositories {
    mavenCentral()
    gradlePluginPortal()
    mavenLocal()
    google()
  }
}
plugins { id("com.facebook.react.settings") }
extensions.configure(com.facebook.react.ReactSettingsExtension){ ex -> ex.autolinkLibrariesFromCommand() }

include ':app'

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle")
apply from: new File(rootDir, "versioning_linking.gradle")

def getRNMinorVersion() {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return minor
}

if (getRNMinorVersion() < 75) {
  apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
  applyNativeModulesSettingsGradle(settings)
}

includeBuild('../../../react-native-lab/react-native/packages/react-native-gradle-plugin/')

include ':expoview'
include ':tools'
include ':packages:react-native:ReactAndroid'
project(':packages:react-native:ReactAndroid').projectDir = new File(rootDir, '../../../react-native-lab/react-native/packages/react-native/ReactAndroid')
dependencyResolutionManagement {
  versionCatalogs {
    defaultLibrariesExtensionName = "expoLibs"
    libs {
      from(files("../../../react-native-lab/react-native/packages/react-native/gradle/libs.versions.toml"))
    }
  }
}
include ':packages:react-native:ReactAndroid:hermes-engine'
project(':packages:react-native:ReactAndroid:hermes-engine').projectDir = new File(rootDir, '../../../react-native-lab/react-native/packages/react-native/ReactAndroid/hermes-engine')
include ':expo-modules-test-core'
project(':expo-modules-test-core').projectDir = new File(rootDir, '../../../packages/expo-modules-test-core/android')

// Include Expo modules that are not unimodules
include(":expo-random")
project(":expo-random").projectDir = new File("../../../packages/expo-random/android")

[
    // ADD_NEW_SUPPORTED_ABIS_HERE
].forEach({ abiVariant ->
  include ":expoview-$abiVariant"
  project(":expoview-$abiVariant").projectDir = new File(rootDir, "versioned-abis/expoview-$abiVariant")
})

useExpoModules([
    searchPaths: [
        '../../../packages'
    ],
    exclude : [
        'expo-module-template',
        'expo-module-template-local',
        'react-native-reanimated',
        'expo-dev-menu-interface',
        'expo-dev-menu',
        'expo-dev-launcher',
        'expo-dev-client',
        'expo-maps',
        'expo-network-addons',
    ]
])

useVendoredModulesForSettingsGradle('unversioned')
